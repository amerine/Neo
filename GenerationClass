package com.neosup.VampZ.generation;

import java.util.Random;

import net.minecraft.world.World;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.chunk.IChunkProvider;
import net.minecraft.world.gen.feature.WorldGenMinable;

import com.neosup.VampZ.MainClass;
import com.neosup.VampZ.biome.BiomesVZ;
import com.neosup.VampZ.generation.building.BAssassinTowerSchematic;
import com.neosup.VampZ.generation.building.RuinSchematic;

import cpw.mods.fml.common.IWorldGenerator;

public class GenerationClass implements IWorldGenerator {

	@Override
	public void generate(Random random, int chunkX, int chunkZ, World world, IChunkProvider chunkGenerator, IChunkProvider chunkProvider) {
		
		switch(world.provider.dimensionId) {
		case -1:
			generateInNether(world, random, chunkX*16, chunkZ*16);
			break;
		case 0:
			generateInOverworld(world, random, chunkX*16, chunkZ*16);
			break;
		case 1:
			generateSurface(world, random, chunkX*16, chunkZ*16);
			}
		
	}
	private void generateSurface(World world, Random random, int x, int z) {
	      
	      //Generate Assassin Tower
	            BiomeGenBase biome = world.getWorldChunkManager().getBiomeGenAt(x, z);
	            
	            if(biome == BiomeGenBase.plains || biome == BiomesVZ.biomeLivingLand || biome == BiomesVZ.biomeVampireLand || biome == BiomeGenBase.forest)
	            	for (int a = 0; a < 1; a++ ) {
	 	                  int a2 = x + random.nextInt(256);
	 	                  int b2 = z + random.nextInt(256);
	 	                  int c2 = world.getHeightValue(a2, b2);   
	 	                  new BAssassinTowerSchematic().generate(world, random, a2, b2, c2);
	            {
	            }
    	}
}

 void generateInOverworld(World world, Random random, int x, int z) {		
		//Generate BloodyCoal
		for(int i = 0; i < 12; i++) { //Number 25 = to Rarity
		int chunkX = x + random.nextInt(16);
		int  chunkY = random.nextInt(45);
		int chunkZ = z + random.nextInt(16);
		(new WorldGenMinable(MainClass.Bloodycoalore, 8)).generate(world, random, chunkX, chunkY, chunkZ);
			
		}
		//Generate BloodShardOre
		for(int i = 0; i < 12; i++) { //Number 30 = to Rarity
		int chunkX = x + random.nextInt(16);
		int  chunkY = random.nextInt(60);
		int chunkZ = z + random.nextInt(16);
		(new WorldGenMinable(MainClass.Bloodshardore, 6)).generate(world, random, chunkX, chunkY, chunkZ);
			
		}
	
		//Generate MythorOre
		for(int i = 0; i < 15; i++) { //Number 10 = to Rarity
		int chunkX = x + random.nextInt(16);
		int  chunkY = random.nextInt(20);
		int chunkZ = z + random.nextInt(16);
		(new WorldGenMinable(MainClass.Mythorore, 4)).generate(world, random, chunkX, chunkY, chunkZ);
		
	}
		//Generate ExpBlock
		for(int i = 0; i < 15; i++) { //Number 5 = to Rarity
		int chunkX = x + random.nextInt(16);
		int  chunkY = random.nextInt(70);
		int chunkZ = z + random.nextInt(16);
		(new WorldGenMinable(MainClass.ExpBlock, 3)).generate(world, random, chunkX, chunkY, chunkZ);
		}
		
		//Generate Bloodstone
		for(int i = 0; i < 5; i++) { //Number 5 = to Rarity
		int chunkX = x + random.nextInt(16);
		int  chunkY = random.nextInt(50);
		int chunkZ = z + random.nextInt(16);
		(new WorldGenMinable(MainClass.Bloodstone,50)).generate(world, random, chunkX, chunkY, chunkZ);
		}
		
				
		
	}
	private void generateInNether(World world, Random random, int x, int z) {
		
	}

}
